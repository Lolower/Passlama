import asyncio
import qrcode
import base64
from flask import Flask, Response, render_template_string, request, send_file
from solana.rpc.async_api import AsyncClient
from solders.pubkey import Pubkey
import uuid
import os

app = Flask(__name__)
DEVNET_URL = "http://localhost:8899"
client = AsyncClient(DEVNET_URL)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
session_data = {}

async def get_wallet_balance(pubkey: str):
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è...")
    try:
        public_key = Pubkey.from_string(pubkey)
        response = await client.get_balance(public_key)
        balance = response.value / 1e9
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è {pubkey}: {balance} SOL")
        return balance
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É: {str(e)}")
        return None

async def request_airdrop(pubkey: str, amount_lamports: int = 1_000_000_000):
    print(f"üíß –ó–∞–ø–∏—Ç airdrop {amount_lamports / 1e9} SOL...")
    try:
        public_key = Pubkey.from_string(pubkey)
        response = await client.request_airdrop(public_key, amount_lamports)
        signature = response.value
        print(f"üìù Airdrop signature: {signature}")

        # –î–æ–¥–∞–º–æ –±—ñ–ª—å—à–µ —á–∞—Å—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        import time
        for _ in range(5):  # –°–ø—Ä–æ–±—É—î–º–æ 5 —Ä–∞–∑—ñ–≤ –∑ –ø–∞—É–∑–æ—é
            confirm_response = await client.confirm_transaction(signature, commitment="confirmed")
            if confirm_response.value:
                print("‚úÖ Airdrop –≤–∏–∫–æ–Ω–∞–Ω–æ!")
                return True
            print(f"‚è≥ –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è... –°–ø—Ä–æ–±–∞ {_ + 1}")
            time.sleep(2)
        print("‚ùå Airdrop –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –ø—ñ—Å–ª—è 5 —Å–ø—Ä–æ–±")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ airdrop: {str(e)}")
        return False

@app.route('/')
def index():
    session_id = str(uuid.uuid4())
    qr_data = f"http://localhost:5000/connect?session={session_id}"
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(qr_data)
    qr.make(fit=True)
    img = qr.make_image(fill="black", back_color="white")
    img.save("qr_code.png")

    with open("qr_code.png", "rb") as f:
        qr_image = base64.b64encode(f.read()).decode()
    return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head><title>QR Login</title></head>
        <body>
            <h1>Scan QR Code to Login with Phantom</h1>
            <img src="data:image/png;base64,{{ qr_image }}" alt="QR Code">
            <p>–°–∫–∞–Ω—É–π –∫–æ–¥ –∞–±–æ –ø–µ—Ä–µ–π–¥–∏ –∑–∞ <a href="/connect_page">–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º</a></p>
        </body>
        </html>
    """, qr_image=qr_image)

@app.route('/connect_page')
def connect_page():
    return send_file("index.html")

@app.route('/connect')
def connect():
    session_id = request.args.get('session')
    if not session_id:
        return "Invalid session", 400
    return "–ü–µ—Ä–µ–π–¥–∏ –Ω–∞ /connect_page, —â–æ–± –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ Phantom Wallet."

@app.route('/check_balance')
async def check_balance():
    try:
        with open("phantom_public_key.txt", "r") as f:
            PUBLIC_KEY = f.read().strip()
            print(f"üîë –ó—á–∏—Ç–∞–Ω–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: {PUBLIC_KEY}")
            balance = await get_wallet_balance(PUBLIC_KEY)
            if balance is None or balance < 0.5:
                await request_airdrop(PUBLIC_KEY)
            return f"Balance: {balance} SOL"
    except FileNotFoundError:
        return "‚ö†Ô∏è –§–∞–π–ª phantom_public_key.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—ñ–¥–∫–ª—é—á–∏ Phantom —á–µ—Ä–µ–∑ /connect_page.", 400
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
