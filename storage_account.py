import json
import asyncio
import base64
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.async_api import AsyncClient
from solana.rpc.types import TxOpts
from solana.rpc.api import Client as SyncClient
from solders.message import MessageV0
from solders.transaction import VersionedTransaction
from solders.system_program import create_account_with_seed
import os
from cryptography.fernet import Fernet
import random

DEVNET_URL = "https://api.devnet.solana.com"
SYS_PROGRAM_ID = Pubkey.from_string("11111111111111111111111111111111")
PROGRAM_ID = Pubkey.from_string("FAjsXV6jUnBB48aydJpRXonx1jwRCbPiHTuATnTWCDiP")



def ensure_crypto_dir():
    os.makedirs("cryptod", exist_ok=True)

def generate_and_save_keypair(filename):
    ensure_crypto_dir()
    keypair = Keypair()
    with open(os.path.join("cryptod", filename), 'w') as f:
        json.dump(list(keypair.to_bytes()), f)
    return keypair

def load_keypair(filename):
    try:
        with open(os.path.join("cryptod", filename), 'r') as f:
            key_bytes = json.load(f)
        return Keypair.from_bytes(bytes(key_bytes))
    except FileNotFoundError:
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –∫–ª—é—á–æ–≤–æ—ó –ø–∞—Ä–∏ –¥–ª—è {filename}...")
        return generate_and_save_keypair(filename)

def save_encryption_key(key, filename):
    ensure_crypto_dir()
    with open(os.path.join("cryptod", filename), 'wb') as f:
        f.write(base64.b64encode(key))
    print(f"üîë –ö–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {filename}")

async def get_minimum_balance_for_rent_exemption(client, space):
    print("üìè –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è —Ä–µ–Ω—Ç–∏...")
    async with asyncio.timeout(10):
        resp = await client.get_minimum_balance_for_rent_exemption(space)
        return resp.value

async def request_airdrop_if_needed(client, pubkey, min_balance=500_000_000):
    print("üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É...")
    async with asyncio.timeout(10):
        balance_resp = await client.get_balance(pubkey, commitment=Confirmed)
        balance = balance_resp.value
        if balance >= min_balance:
            print(f"‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance / 1_000_000_000} SOL (–¥–æ—Å—Ç–∞—Ç–Ω—å–æ)")
            return True
        print(f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–∏–∑—å–∫–∏–π ({balance / 1_000_000_000} SOL), –∑–∞–ø–∏—Ç airdrop...")
        airdrop_resp = await client.request_airdrop(pubkey, 1_000_000_000, commitment=Confirmed)
        tx_id = airdrop_resp.value
        start_time = time.time()
        timeout = 60
        while time.time() - start_time < timeout:
            confirmation = await client.get_transaction(tx_id, commitment=Confirmed)
            if confirmation.value and confirmation.value.transaction.meta.err is None:
                balance_resp = await client.get_balance(pubkey, commitment=Confirmed)
                if balance_resp.value > 0:
                    print("‚úÖ Airdrop —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!")
                    return True
            await asyncio.sleep(5)
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ airdrop: —Ç–∞–π–º–∞—É—Ç")
        return False

def encrypt_password(password, key):
    print("üîê –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è...")
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(password.encode())
    return base64.b64encode(cipher.nonce + tag + ciphertext).decode()

def decrypt_password(encrypted, key):
    print("üîì –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è...")
    data = base64.b64decode(encrypted)
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag).decode()

async def create_storage_account(client, payer, storage_account, lamports, space):
    print("üî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è...")
    max_retries = 3
    retry_count = 0

    async with asyncio.timeout(10):
        account_info = await client.get_account_info(storage_account.pubkey(), commitment=Confirmed)
        if account_info.value is not None:
            print(f"‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç {storage_account.pubkey()} —É–∂–µ —ñ—Å–Ω—É—î!")
            return True

    while retry_count < max_retries:
        try:
            print(f"üîÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è blockhash (—Å–ø—Ä–æ–±–∞ {retry_count + 1})...")
            async with asyncio.timeout(10):
                blockhash_resp = await client.get_latest_blockhash(commitment=Confirmed)
                recent_blockhash = blockhash_resp.value.blockhash
                print(f"üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è blockhash: {recent_blockhash}")

            create_account_ix = sp.CreateAccountWithSeedParams(
                from_pubkey=payer.pubkey(),
                to_pubkey=storage_account.pubkey(),
                base_pubkey=payer.pubkey(),
                seed="storage",
                lamports=lamports,
                space=space,
                program_id=PROGRAM_ID
            ).to_instruction()

            message = MessageV0.compile(
                payer=payer.pubkey(),
                instructions=[create_account_ix],
                recent_blockhash=recent_blockhash
            )

            txn = VersionedTransaction(
                message=message,
                keypairs=[payer]
            )

            send_opts = TxOpts(
                skip_preflight=False,
                preflight_commitment=Confirmed,
                max_retries=3
            )

            print("üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...")
            async with asyncio.timeout(15):
                result = await client.send_transaction(txn, opts=send_opts)
                tx_id = result.value
                print(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑ ID: {tx_id}")

            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...")
            async with asyncio.timeout(15):
                confirmation = await client.get_transaction(tx_id, commitment=Confirmed)
                if confirmation.value and confirmation.value.transaction.meta.err is None:
                    print(f"‚úÖ –ê–∫–∞—É–Ω—Ç {storage_account.pubkey()} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
                    return True
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {confirmation.value.transaction.meta.err}")
                    retry_count += 1
                    await asyncio.sleep(2)
                    continue

        except asyncio.TimeoutError:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ (—Å–ø—Ä–æ–±–∞ {retry_count + 1})")
            retry_count += 1
            await asyncio.sleep(2)
            continue
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ (—Å–ø—Ä–æ–±–∞ {retry_count + 1}): {str(e)}")
            retry_count += 1
            await asyncio.sleep(2)
            continue

    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±")
    return False



async def store_encrypted_password(client, payer, storage_account_pubkey: Pubkey, encrypted_password: str, bump: int) -> bool:
    print("üóÑÔ∏è –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –≤ –∞–∫–∞—É–Ω—Ç—ñ...")
    try:
        space = 8 + 1 + 4 + 1024 + 1  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–æ–∑–º—ñ—Ä—É –≤ lib.rs
        lamports = await get_minimum_balance_for_rent_exemption(client, space)
        print(f"üìä –ü–æ—Ç—Ä—ñ–±–Ω–æ lamports: {lamports}")
        account_info = await client.get_account_info(storage_account_pubkey, commitment=Confirmed)
        is_initialized = account_info.value is not None
        print(f"‚ÑπÔ∏è –ê–∫–∞—É–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π: {is_initialized}")

        encrypted_bytes = base64.b64decode(encrypted_password)
        print(f"üîí –†–æ–∑–º—ñ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {len(encrypted_bytes)} –±–∞–π—Ç")

        if not is_initialized:
            # –°—Ç–≤–æ—Ä—é—î–º–æ Keypair –¥–ª—è payer, –∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Pubkey –¥–ª—è storage_account
            storage_account = Keypair()  # –¢–∏–º—á–∞—Å–æ–≤–∏–π Keypair –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞
            success = await create_storage_account(client, payer, storage_account, lamports, space)
            if not success:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç")
                return False

        # –û–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ç–æ—Ä –¥–ª—è "global:initialize"
        import hashlib
        function_name = "global:initialize"
        discriminator = hashlib.sha256(function_name.encode()).digest()[:8]
        instruction_data = discriminator + encrypted_bytes + bytes([bump])

        accounts = [
            AccountMeta(pubkey=storage_account_pubkey, is_signer=False, is_writable=True),
            AccountMeta(pubkey=payer.pubkey(), is_signer=True, is_writable=True),
            AccountMeta(pubkey=SYS_PROGRAM_ID, is_signer=False, is_writable=False),
        ]

        initialize_ix = Instruction(
            program_id=PROGRAM_ID,
            accounts=accounts,
            data=instruction_data
        )

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è compute budget
        compute_unit_limit_ix = set_compute_unit_limit(200_000)
        compute_unit_price_ix = set_compute_unit_price(0)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è recent_blockhash
        async with asyncio.timeout(10):
            blockhash_resp = await client.get_latest_blockhash(commitment=Confirmed)
            recent_blockhash = blockhash_resp.value.blockhash
            print(f"üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è blockhash: {recent_blockhash}")

        message = MessageV0.compile(
            payer=payer.pubkey(),
            instructions=[compute_unit_limit_ix, compute_unit_price_ix, initialize_ix],
            recent_blockhash=recent_blockhash
        )

        txn = VersionedTransaction(
            message=message,
            keypairs=[payer]
        )

        send_opts = TxOpts(
            skip_preflight=False,
            preflight_commitment=Confirmed,
            max_retries=3
        )

        print("üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
        result = await client.send_transaction(txn, opts=send_opts)
        tx_id = result.value
        print(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑ ID: {tx_id}")

        print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...")
        async with asyncio.timeout(15):
            confirmation = await client.get_transaction(tx_id, commitment=Confirmed)
            if confirmation.value and confirmation.value.transaction.meta.err is None:
                print("‚úÖ –ê–∫–∞—É–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –ø–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {confirmation.value.transaction.meta.err}")
                return False

        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è: {str(e)}")
        raise

async def retrieve_encrypted_password(client, storage_account_pubkey: Pubkey) -> str:
    print("üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∑ –∞–∫–∞—É–Ω—Ç–∞...")
    try:
        account_info = await client.get_account_info(storage_account_pubkey, commitment=Confirmed)
        if account_info.value is None:
            print("‚ùå –ê–∫–∞—É–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î")
            raise Exception("Account not found")

        data = account_info.value.data
        if len(data) < 8:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –≤ –∞–∫–∞—É–Ω—Ç—ñ")
            raise Exception("Invalid account data")

        encrypted_bytes = data[8:]  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ç–æ—Ä
        encrypted = base64.b64encode(encrypted_bytes).decode()
        print("‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å –æ—Ç—Ä–∏–º—ñ–∞–Ω–æ!")
        return encrypted
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è: {str(e)}")
        raise

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏...")
    client = AsyncClient(DEVNET_URL)
    try:
        print("üîë –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤...")
        payer = load_keypair("payer.json")
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDA –¥–ª—è storage_account
        seeds = [b"password_vault"]  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î seeds —É lib.rs
        storage_account_pubkey, bump = Pubkey.find_program_address(seeds, PROGRAM_ID)
        print(f"üóÑÔ∏è Storage account (PDA): {storage_account_pubkey}")
        print(f"üîë Payer: {payer.pubkey()}")

        print("üåßÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ airdrop...")
        if not await request_airdrop_if_needed(client, payer.pubkey()):
            print("\n‚ÑπÔ∏è –û—Ç—Ä–∏–º—ñ–π—Ç–µ SOL –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ https://solfaucet.com...")
            print(f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: {payer.pubkey()}\n")
            return

        print("üîê –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è...")
        password = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: ")
        if not password:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            return

        encryption_key = get_random_bytes(32)
        encrypted = encrypt_password(password, encryption_key)
        print(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {encrypted[:50]}...")
        save_encryption_key(encryption_key, "encryption_key.txt")

        # –ü–µ—Ä–µ–¥–∞—î–º–æ storage_account_pubkey —è–∫ Pubkey, –∞ –Ω–µ Keypair
        if await store_encrypted_password(client, payer, storage_account_pubkey, encrypted, bump):
            print("üíæ –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∞–∫–∞—É–Ω—Ç—ñ!")

            retrieved_encrypted = await retrieve_encrypted_password(client, storage_account_pubkey)
            print(f"üì• –û—Ç—Ä–∏–º—ñ–∞–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {retrieved_encrypted[:50]}...")

            decrypted = decrypt_password(retrieved_encrypted, encryption_key)
            print(f"üîì –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å: {password}")
            print(f"üîì –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {decrypted}")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–∞—Ä–æ–ª—å")

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    finally:
        await client.close()
        print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    asyncio.run(main())

